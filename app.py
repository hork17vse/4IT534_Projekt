_dalmltr

# Konfigurace str√°nky
st.set_page_config(
    page_title="Skin Cancer AI",
    page_icon="‚öïÔ∏è",
    layout="wide",  # ≈†irok√© rozlo≈æen√≠ pro lep≈°√≠ vyu≈æit√≠ prostoru
    initial_sidebar_state="expanded" # Rozbalen√Ω sidebar
)

# Naƒçten√≠ modelu
MODEL_PATH = "model/best_resnet.pth"
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Definice modelu
model = models.resnet18()
num_classes = 7
model.fc = nn.Sequential(
    nn.Dropout(0.3),
    nn.Linear(model.fc.in_features, num_classes)
)
model.load_state_dict(torch.load(MODEL_PATH, map_location=device))
model = model.to(device)
model.eval()

# Definice transformac√≠
transform = transforms.Compose([
    transforms.Resize((128, 128)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

# Definice t≈ô√≠d (mus√≠ odpov√≠dat datasetu HAM10000)
CLASS_NAMES = {
    0: "Benign√≠ kerat√≥za (bkl)",
    1: "Melanom (mel) ‚ùó",
    2: "Nevus (nv)",
    3: "Dermatofibrom (df)",
    4: "Bazocelul√°rn√≠ karcinom (bcc) ‚ùó",
    5: "Aktinick√° kerat√≥za / intraepiderm√°ln√≠ karcinom (akiec) ‚ùó",
    6: "Vaskul√°rn√≠ l√©ze (vasc)"
}

# Sidebar s informacemi o modelu
st.sidebar.title("O modelu")
st.sidebar.info(
    """
    - **Pou≈æit√Ω model:** ResNet-18 (p≈ôevzat√Ω z PyTorch)
    - **Poƒçet tr√©novac√≠ch epoch:** 10
    - **P≈ôesnost na testovac√≠ch datech:** ~82%
    - **Pou≈æit√Ω dataset:** HAM10000
    """
)

# Nadpis a popis
st.title("üî¨ Diagnostika rakoviny k≈Ø≈æe pomoc√≠ AI")
st.write("Nahrajte fotku ko≈æn√≠ l√©ze a zjistƒõte, zda se jedn√° o benign√≠ nebo malign√≠ n√°lez.")

# Nahr√°n√≠ obr√°zku
uploaded_file = st.file_uploader("Nahrajte obr√°zek (JPG/PNG)", type=["jpg", "png", "jpeg"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")

    # Transformace obr√°zku
    input_image = transform(image).unsqueeze(0).to(device)

    # Simulace naƒç√≠t√°n√≠
    with st.spinner("Analyzuji obr√°zek..."):
        time.sleep(2)
        with torch.no_grad():
            output = model(input_image)
            probabilities = torch.softmax(output, dim=1).cpu().numpy()
            predicted_class = np.argmax(probabilities)

    # Zobrazen√≠ obr√°zku a v√Ωsledk≈Ø vedle sebe
    col1, col2 = st.columns([1, 1])
    with col1:
        st.image(image, caption="Nahran√Ω obr√°zek", use_column_width=True)

    with col2:
        # V√Ωsledky predikce
        diagnosis = CLASS_NAMES[predicted_class]
        prob_percentage = probabilities[0][predicted_class] * 100

        st.subheader("V√Ωsledky predikce")
        if predicted_class in [1, 4, 5]:
            st.markdown(f'<span style="color:red; font-weight:bold;">{diagnosis} ({prob_percentage:.2f}%)</span>', unsafe_allow_html=True)
            st.warning("Model detekoval potenci√°lnƒõ nebezpeƒçnou l√©zi! Doporuƒçujeme konzultaci s dermatologem.")
        else:
            st.markdown(f'<span style="color:green; font-weight:bold;">{diagnosis} ({prob_percentage:.2f}%)</span>', unsafe_allow_html=True)
            st.success("Model neindikuje nebezpeƒçnou l√©zi. Pokud m√°te pochybnosti, konzultujte s l√©ka≈ôem.")

        # Vizualizace pravdƒõpodobnost√≠ pomoc√≠ progress bar≈Ø
        st.subheader("Pravdƒõpodobnosti jednotliv√Ωch t≈ô√≠d:")
        for idx, prob in enumerate(probabilities[0]):
            st.progress(int(prob * 100))
            st.write(f"**{CLASS_NAMES[idx]}**: {prob:.2%}")